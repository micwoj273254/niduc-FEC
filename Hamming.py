import binary
import komm
from BSCchannel import bscchannel
from GEchannel import gechannel
from b2b import bytearray_to_bits, bits_to_bytearray
from generator import generate_random_bytes

# Hamming returns list with encoded hamming_code arrays
def Hamming(byte_array: bytearray, redundancy:int):
    output = []
    code = komm.HammingCode(redundancy)
    encoder = komm.BlockEncoder(code)
    dimension = pow(2, redundancy) - redundancy - 1
    bits = bytearray_to_bits(byte_array)
    bits = binary.intListToStrList(bits)
    bin = binary.binaryListToBinary(bits)
    list = binary.binaryToBinaryList(bin,dimension)
    list = binary.d2StrListTod2intList(list)
    for i in list:
        output.append(encoder(i))

    return output


if __name__ == "__main__":
    a = generate_random_bytes(42)
    b = Hamming(a,8)
    code = komm.HammingCode(8)
    decoder = komm.BlockDecoder(code)
    c = []

    for i in b:
        c.append(bscchannel(i,0.001))

    d = []
    ge_error = 0
    ge_error_position = []

    for i in b:
        e, error, k = gechannel(i.tolist(),0.00, 0.00004, 0.001, 0.09)
        d.append(e)
        ge_error += error
        ge_error += k

    for k in range(len(d)):
        for i in range(len(d[k])):
            if d[k][i] != b[k][i]:
                string = str(k) +  "; " + str(i)
                ge_error_position.append(string)

    bsc_error = 0
    bsc_error_position = []

    for k in range(len(c)):
        for i in range(len(c[k])):
            if c[k][i] != b[k][i]:
                bsc_error += 1
                string = str(k) +  "; " + str(i)
                bsc_error_position.append(string)

    decoded_c = []
    decoded_d = []

    for i in c:
        decoded_c.append(decoder(i))

    for i in d:
        decoded_d.append(decoder(i))

    flatc = []

    for i in decoded_c:
        flatc.extend(i)
    decoded_c = flatc

    flatd = []

    for i in decoded_d:
        flatd.extend(i)
    decoded_d = flatd

    decoded_list_c = []
    decoded_c = binary.intListToStrList(decoded_c)

    string = ""
    listc = []
    for j in decoded_c:
        string += j
    string = string.rstrip("0")
    while len(string) % 8 != 0:
        string += "0"
    for j in string:
        listc.append(int(j))

    decoded_list_c = listc
    decoded_byte_c = bits_to_bytearray(decoded_list_c)

    decoded_list_d = []
    decoded_d = binary.intListToStrList(decoded_d)

    string = ""
    listd = []
    for j in decoded_d:
        string += j
    string = string.rstrip("0")
    while len(string) % 8 != 0:
        string += "0"
    for j in string:
        listd.append(int(j))

    decoded_list_d = listd
    decoded_byte_d = bits_to_bytearray(decoded_list_d)

    print("generated bytes :",a)
    print("(byte) decoded Hamming code after bsc :", decoded_byte_c)
    print("(byte) decoded Hamming code after ge :", decoded_byte_d)
    print("(bit)Hamming code :",b)
    print("(bit)Hamming code after bsc :",c)
    print("(bit) decoded Hamming code after bsc :", decoded_c)
    print("(bit)Hamming code after ge :",d)
    print("(bit) decoded Hamming code after ge :", decoded_d)
    print("number of bsc errors:",bsc_error)
    print("(bit)position of bsc errors:",bsc_error_position)
    print("number of ge errors:", ge_error)
    print("(bit)position of ge errors:", ge_error_position)