import binary
import komm
from HammingFunction import HammingFunction
from reedsolo import RSCodec, ReedSolomonError

from BSCchannel import bscchannel
from GEchannel import gechannel
from b2b import bytearray_to_bits, bits_to_bytearray
from generator import generate_random_bytes


# Generate random bytes
a = generate_random_bytes(4)
print("Original data:", a)

# Create an RSCodec instance with 4 error correction symbols
rsc = RSCodec(25)

# Encode the data
b = rsc.encode(a)
print("Encoded data:", b)

# Convert the encoded data to bits
c = bytearray_to_bits(b)
print("Encoded data in bits:", c)

# Simulate transmission through channels
d = bscchannel(c, 0.03)
print("BSC channel data:", d)
bsc_errors = 0
for i in range(len(c)):
    if c[i] != d[i]:
        bsc_errors += 1
print("Number of errors in BSC channel:", bsc_errors)
print("BSC BER:", bsc_errors/len(c))


e, ge_independent, ge_burst = gechannel(c, 0.00111, 0.004, 0.007631513, 0.99999)
print("Gilbert-Elliott channel data:", e)
ge_errors = ge_independent + ge_burst
print("Total number of errors in Gilbert-Elliott channel:", ge_errors)
print("Number of independent errors in Gilbert-Elliott channel:", ge_independent)
print("Number of burst errors in Gilbert-Elliott channel:", ge_burst)
print("Gilbert-Elliott BER:", ge_errors/len(c))


# Convert the bits back to bytearrays
f = bits_to_bytearray(d)
print("Data after BSC channel:", f)

g = bits_to_bytearray(e)
print("Data after GE channel:", g)

# Decode the data
try:
    decoded_z = rsc.decode(f)
    print("Decoded data from BSC channel:", decoded_z)
except ReedSolomonError as z:
    print("Decoding error from BSC channel:", z)

try:
    decoded_y = rsc.decode(f)
    print("Decoded data from GE channel:", decoded_y)
except ReedSolomonError as z:
    print("Decoding error from GE channel:", z)

run_hammingcode = 1

if run_hammingcode == 1:
    aH = generate_random_bytes(47)
    bH = HammingFunction(aH, 8)
    codeH = komm.HammingCode(8)
    decoderH = komm.BlockDecoder(codeH)
    cH = []

    for i in bH:
        cH.append(bscchannel(i, 0.001))

    dH = []
    ge_errorH = 0
    ge_error_positionH = []

    for i in bH:
        eH, errorH, kH = gechannel(i.tolist(), 0.00, 0.00004, 0.001, 0.09)
        dH.append(eH)
        ge_errorH += errorH
        ge_errorH += kH

    for kH in range(len(dH)):
        for i in range(len(dH[kH])):
            if dH[kH][i] != bH[kH][i]:
                stringH = str(kH) + "; " + str(i)
                ge_error_positionH.append(stringH)

    bsc_errorH = 0
    bsc_error_positionH = []

    for kH in range(len(cH)):
        for i in range(len(cH[kH])):
            if cH[kH][i] != bH[kH][i]:
                bsc_errorH += 1
                stringH = str(kH) + "; " + str(i)
                bsc_error_positionH.append(stringH)

    decoded_cH = []
    decoded_dH = []

    for i in cH:
        decoded_cH.append(decoderH(i))

    for i in dH:
        decoded_dH.append(decoderH(i))

    flatcH = []

    for i in decoded_cH:
        flatcH.extend(i)
    decoded_cH = flatcH

    flatdH = []

    for i in decoded_dH:
        flatdH.extend(i)
    decoded_dH = flatdH

    decoded_list_cH = []
    decoded_cH = binary.intListToStrList(decoded_cH)

    stringH = ""
    listcH = []
    for j in decoded_cH:
        stringH += j
    stringH = stringH.rstrip("0")
    while len(stringH) % 8 != 0:
        stringH += "0"
    for j in stringH:
        listcH.append(int(j))

    decoded_list_cH = listcH
    decoded_byte_cH = bits_to_bytearray(decoded_list_cH)

    decoded_list_dH = []
    decoded_dH = binary.intListToStrList(decoded_dH)

    stringH = ""
    listdH = []
    for j in decoded_dH:
        stringH += j
    stringH = stringH.rstrip("0")
    while len(stringH) % 8 != 0:
        stringH += "0"
    for j in stringH:
        listdH.append(int(j))

    decoded_list_dH = listdH
    decoded_byte_dH = bits_to_bytearray(decoded_list_dH)

    print("Hamming code")
    print("")
    print("generated bytes :", aH)
    print("(byte) decoded Hamming code after bsc :", decoded_byte_cH)
    print("(byte) decoded Hamming code after ge :", decoded_byte_dH)
    print("(bit)Hamming code :", bH)
    print("(bit)Hamming code after bsc :", cH)
    print("(bit) decoded Hamming code after bsc :", decoded_cH)
    print("(bit)Hamming code after ge :", dH)
    print("(bit) decoded Hamming code after ge :", decoded_dH)
    print("number of bsc errors:", bsc_errorH)
    print("(bit)position of bsc errors:", bsc_error_positionH)
    print("BSC BER:", bsc_errorH / len(bH))
    print("number of ge errors:", ge_errorH)
    print("(bit)position of ge errors:", ge_error_positionH)
    print("GE BER:", ge_errorH / len(bH))